package org.celllife.idart.domain.clinicprescription

import org.celllife.idart.domain.clinic.Clinic
import org.celllife.idart.domain.prescription.Prescription
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Service

import javax.annotation.Generated

/**
 * Generated by org.celllife.idart.codegen.CodeGenerator
 */
@Generated("org.celllife.idart.codegen.CodeGenerator")
@Service class ClinicPrescriptionServiceImpl implements ClinicPrescriptionService {

    @Autowired ClinicPrescriptionRepository clinicPrescriptionRepository

    @Override
    boolean exists(Clinic clinic, Prescription prescription, Date dateActive) {
        clinicPrescriptionRepository.countByClinicAndPrescriptionAndDateActive(clinic, prescription, dateActive) == 0
    }

    @Override
    void save(Clinic clinic, Prescription prescription) {

        def dateActive = new Date()

        if (exists(clinic, prescription, dateActive)) {
            clinicPrescriptionRepository
                    .save(new ClinicPrescription(clinic: clinic, prescription: prescription, fromDate: dateActive))
        }
    }


    @Override
    void save(Clinic clinic, Iterable<Prescription> prescriptions) {
        prescriptions.each { prescription -> save(clinic, prescription) }
    }

    @Override
    void save(Prescription prescription, Iterable<Clinic> clinics) {
        clinics.each { clinic -> save(clinic, prescription) }
    }

    @Override
    void deleteByClinic(Clinic clinic) {
        findPrescriptionsByClinic(clinic).each { prescription -> delete(clinic, prescription) }
    }

    @Override
    void deleteByPrescription(Prescription prescription) {
        findClinicsByPrescription(prescription).each { clinic -> delete(clinic, prescription) }
    }

    @Override
    void delete(Clinic clinic, Prescription prescription) {

        ClinicPrescription clinicPrescription =
            clinicPrescriptionRepository.findByClinicAndPrescriptionAndDateActive(clinic, prescription, new Date())

        if (clinicPrescription != null) {
            clinicPrescription.thruDate = new Date()
            clinicPrescriptionRepository.save(clinicPrescription)
        }
    }

    @Override
    Iterable<Prescription> findPrescriptionsByClinic(Clinic clinic) {
        clinicPrescriptionRepository
                .findByClinicAndDateActive(clinic, new Date())
                .collect { clinicPrescription -> clinicPrescription.prescription }
    }

    @Override
    Iterable<Prescription> findPrescriptionsByClinicIdentifier(String clinicIdentifier) {
        clinicPrescriptionRepository
                .findByClinicIdentifierAndDateActive(clinicIdentifier, new Date())
                .collect { clinicPrescription -> clinicPrescription.prescription }
    }
            
    @Override
    Iterable<Prescription> findPrescriptionsByClinicIdentifierAndPrescriptionIdentifier(String clinicIdentifier, String prescriptionIdentifier) {
        clinicPrescriptionRepository
                .findByClinicIdentifierAndPrescriptionIdentifierAndDateActive(
                        clinicIdentifier,
                        prescriptionIdentifier,
                        new Date()
                )
                .collect { clinicPrescription -> clinicPrescription.prescription }
    }
         
    @Override
    Prescription findOnePrescriptionByClinicIdentifierAndPrescriptionIdentifier(String clinicIdentifier, String prescriptionIdentifier) {
        clinicPrescriptionRepository
                .findOneByClinicIdentifierAndPrescriptionIdentifierAndDateActive(
                        clinicIdentifier,
                        prescriptionIdentifier,
                        new Date()
                )?.prescription
    }

    @Override
    Iterable<Clinic> findClinicsByPrescription(Prescription prescription) {
        clinicPrescriptionRepository
                .findByPrescriptionAndDateActive(prescription, new Date())
                .collect { clinicPrescription -> clinicPrescription.clinic }
    }
}
