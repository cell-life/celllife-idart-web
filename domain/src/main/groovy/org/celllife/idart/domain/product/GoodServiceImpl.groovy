package org.celllife.idart.domain.product

import org.celllife.idart.domain.common.Identifier
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Service

import javax.annotation.Generated

/**
 * Generated by org.celllife.idart.codegen.CodeGenerator
 */
@Generated("org.celllife.idart.codegen.CodeGenerator")
@Service class GoodServiceImpl implements GoodService {

    @Autowired GoodRepository goodRepository

    @Autowired GoodSequence goodSequence

    @Autowired GoodValidator goodValidator

    @Override
    Good save(Good newGood) {

        goodValidator.validate(newGood)

        def existingGood = findByIdentifiers(newGood.identifiers)

        if (requiresIdartIdentifier(newGood, existingGood)) {
            newGood.addIdentifier(Good.IDART_SYSTEM, nextPatientIdentifier())
        }

        if (existingGood == null) {
            existingGood = new Good()
        }

        existingGood.merge(newGood)

        goodRepository.save(existingGood)
    }

    @Override
    Good findByIdentifiers(Iterable<Identifier> identifiers) {
        for (identifier in identifiers) {
            def existingGood = goodRepository.findOneByIdentifier(identifier.system, identifier.value)
            if (existingGood != null) {
                return existingGood
            }
        }

        null
    }

    @Override
    Good findByIdentifier(String identifier) {
        goodRepository.findOneByIdentifier(Good.IDART_SYSTEM, identifier)
    }

    @Override
    Iterable<Good> findAll() {
        goodRepository.findAll()
    }

    String nextPatientIdentifier() {
        String.format("%08d", goodSequence.nextValue())
    }

    static requiresIdartIdentifier(Good... goods) {

        for (Good good in goods) {
            if (good?.hasIdentifierForSystem(Good.IDART_SYSTEM)) {
                return false
            }
        }

        return true
    }
}
