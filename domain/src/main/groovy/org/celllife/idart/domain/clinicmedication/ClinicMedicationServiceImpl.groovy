package org.celllife.idart.domain.clinicmedication

import org.celllife.idart.domain.clinic.Clinic
import org.celllife.idart.domain.medication.Medication
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Service

import javax.annotation.Generated

/**
 * Generated by org.celllife.idart.codegen.CodeGenerator
 */
@Generated("org.celllife.idart.codegen.CodeGenerator")
@Service class ClinicMedicationServiceImpl implements ClinicMedicationService {

    @Autowired ClinicMedicationRepository clinicMedicationRepository

    @Override
    boolean exists(Clinic clinic, Medication medication, Date dateActive) {
        clinicMedicationRepository.countByClinicAndMedicationAndDateActive(clinic, medication, dateActive) == 0
    }

    @Override
    void save(Clinic clinic, Medication medication) {

        def dateActive = new Date()

        if (exists(clinic, medication, dateActive)) {
            clinicMedicationRepository
                    .save(new ClinicMedication(clinic: clinic, medication: medication, fromDate: dateActive))
        }
    }


    @Override
    void save(Clinic clinic, Iterable<Medication> medications) {
        medications.each { medication -> save(clinic, medication) }
    }

    @Override
    void save(Medication medication, Iterable<Clinic> clinics) {
        clinics.each { clinic -> save(clinic, medication) }
    }

    @Override
    void deleteByClinic(Clinic clinic) {
        findMedicationsByClinic(clinic).each { medication -> delete(clinic, medication) }
    }

    @Override
    void deleteByMedication(Medication medication) {
        findClinicsByMedication(medication).each { clinic -> delete(clinic, medication) }
    }

    @Override
    void delete(Clinic clinic, Medication medication) {

        ClinicMedication clinicMedication =
            clinicMedicationRepository.findByClinicAndMedicationAndDateActive(clinic, medication, new Date())

        if (clinicMedication != null) {
            clinicMedication.thruDate = new Date()
            clinicMedicationRepository.save(clinicMedication)
        }
    }

    @Override
    Iterable<Medication> findMedicationsByClinic(Clinic clinic) {
        clinicMedicationRepository
                .findByClinicAndDateActive(clinic, new Date())
                .collect { clinicMedication -> clinicMedication.medication }
    }

    @Override
    Iterable<Medication> findMedicationsByClinicIdentifier(String clinicIdentifier) {
        clinicMedicationRepository
                .findByClinicIdentifierAndDateActive(clinicIdentifier, new Date())
                .collect { clinicMedication -> clinicMedication.medication }
    }
            
    @Override
    Iterable<Medication> findMedicationsByClinicIdentifierAndMedicationIdentifier(String clinicIdentifier, String medicationIdentifier) {
        clinicMedicationRepository
                .findByClinicIdentifierAndMedicationIdentifierAndDateActive(
                        clinicIdentifier,
                        medicationIdentifier,
                        new Date()
                )
                .collect { clinicMedication -> clinicMedication.medication }
    }
         
    @Override
    Medication findOneMedicationByClinicIdentifierAndMedicationIdentifier(String clinicIdentifier, String medicationIdentifier) {
        clinicMedicationRepository
                .findOneByClinicIdentifierAndMedicationIdentifierAndDateActive(
                        clinicIdentifier,
                        medicationIdentifier,
                        new Date()
                )?.medication
    }

    @Override
    Iterable<Clinic> findClinicsByMedication(Medication medication) {
        clinicMedicationRepository
                .findByMedicationAndDateActive(medication, new Date())
                .collect { clinicMedication -> clinicMedication.clinic }
    }
}
