package org.celllife.idart.domain.clinicdispensation

import org.celllife.idart.domain.clinic.Clinic
import org.celllife.idart.domain.dispensation.Dispensation
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Service

import javax.annotation.Generated

/**
 * Generated by org.celllife.idart.codegen.CodeGenerator
 */
@Generated("org.celllife.idart.codegen.CodeGenerator")
@Service class ClinicDispensationServiceImpl implements ClinicDispensationService {

    @Autowired ClinicDispensationRepository clinicDispensationRepository

    @Override
    boolean exists(Clinic clinic, Dispensation dispensation, Date dateActive) {
        clinicDispensationRepository.countByClinicAndDispensationAndDateActive(clinic, dispensation, dateActive) == 0
    }

    @Override
    void save(Clinic clinic, Dispensation dispensation) {

        def dateActive = new Date()

        if (exists(clinic, dispensation, dateActive)) {
            clinicDispensationRepository
                    .save(new ClinicDispensation(clinic: clinic, dispensation: dispensation, fromDate: dateActive))
        }
    }


    @Override
    void save(Clinic clinic, Iterable<Dispensation> dispensations) {
        dispensations.each { dispensation -> save(clinic, dispensation) }
    }

    @Override
    void save(Dispensation dispensation, Iterable<Clinic> clinics) {
        clinics.each { clinic -> save(clinic, dispensation) }
    }

    @Override
    void deleteByClinic(Clinic clinic) {
        findDispensationsByClinic(clinic).each { dispensation -> delete(clinic, dispensation) }
    }

    @Override
    void deleteByDispensation(Dispensation dispensation) {
        findClinicsByDispensation(dispensation).each { clinic -> delete(clinic, dispensation) }
    }

    @Override
    void delete(Clinic clinic, Dispensation dispensation) {

        ClinicDispensation clinicDispensation =
            clinicDispensationRepository.findByClinicAndDispensationAndDateActive(clinic, dispensation, new Date())

        if (clinicDispensation != null) {
            clinicDispensation.thruDate = new Date()
            clinicDispensationRepository.save(clinicDispensation)
        }
    }

    @Override
    Iterable<Dispensation> findDispensationsByClinic(Clinic clinic) {
        clinicDispensationRepository
                .findByClinicAndDateActive(clinic, new Date())
                .collect { clinicDispensation -> clinicDispensation.dispensation }
    }

    @Override
    Iterable<Dispensation> findDispensationsByClinicIdentifier(String clinicIdentifier) {
        clinicDispensationRepository
                .findByClinicIdentifierAndDateActive(clinicIdentifier, new Date())
                .collect { clinicDispensation -> clinicDispensation.dispensation }
    }
            
    @Override
    Iterable<Dispensation> findDispensationsByClinicIdentifierAndDispensationIdentifier(String clinicIdentifier, String dispensationIdentifier) {
        clinicDispensationRepository
                .findByClinicIdentifierAndDispensationIdentifierAndDateActive(
                        clinicIdentifier,
                        dispensationIdentifier,
                        new Date()
                )
                .collect { clinicDispensation -> clinicDispensation.dispensation }
    }
         
    @Override
    Dispensation findOneDispensationByClinicIdentifierAndDispensationIdentifier(String clinicIdentifier, String dispensationIdentifier) {
        clinicDispensationRepository
                .findOneByClinicIdentifierAndDispensationIdentifierAndDateActive(
                        clinicIdentifier,
                        dispensationIdentifier,
                        new Date()
                )?.dispensation
    }

    @Override
    Iterable<Clinic> findClinicsByDispensation(Dispensation dispensation) {
        clinicDispensationRepository
                .findByDispensationAndDateActive(dispensation, new Date())
                .collect { clinicDispensation -> clinicDispensation.clinic }
    }
}
