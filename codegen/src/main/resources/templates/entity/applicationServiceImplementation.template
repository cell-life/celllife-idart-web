package ${applicationService.packageName}

import ${dto.packageName}.${dto.className}
import ${dtoAssembler.packageName}.${dtoAssembler.className}
import ${id.packageName}.${id.className}
import org.celllife.idart.domain.identifiable.IdentifiableService
import org.celllife.idart.common.Identifier
import ${entity.packageName}.${entity.className}NotFoundException
import ${domainService.packageName}.${domainService.className}

import static org.celllife.idart.common.AuthorityId.IDART
import static ${id.packageName}.${id.className}.${id.fieldName}
import static org.celllife.idart.common.IdentifiableType.${entity.identifiableType}
import static org.celllife.idart.common.Identifiers.newIdentifier
import static org.celllife.idart.common.Identifiers.getIdentifierValue

import javax.annotation.Generated
import javax.inject.Inject
import javax.inject.Named

/**
 */
@Generated("org.celllife.idart.codegen.CodeGenerator")
@Named class ${applicationService.className}Impl implements ${applicationService.className} {

    @Inject ${domainService.className} ${domainService.fieldName}   

    @Inject ${dtoAssembler.className} ${dtoAssembler.fieldName}

    @Inject IdentifiableService identifiableService

    @Override
    Boolean exists(${id.className} ${id.fieldName}) {
        ${domainService.fieldName}.exists(${id.fieldName})
    }

    @Override
    ${id.className} save(${dto.className} ${dto.fieldName}) {

        def identifiable = identifiableService.resolveIdentifiable(${entity.identifiableType}, ${dto.fieldName}.identifiers)

        def ${id.fieldName} = ${id.fieldName}(identifiable.getIdentifierValue(IDART))

        def ${entity.fieldName} = ${dtoAssembler.fieldName}.to${entity.className}(${dto.fieldName})
        ${entity.fieldName}.id = ${id.fieldName}

        ${domainService.fieldName}.save(${entity.fieldName})

        ${entity.fieldName}.id
    }

    @Override
    ${dto.className} findBy${id.className}(${id.className} ${id.fieldName}) {
        def identifier = newIdentifier(IDART, ${id.fieldName}.value)
        findByIdentifier(identifier)
    }

    @Override
    ${dto.className} findByIdentifier(Identifier identifier) {

        def identifiable = identifiableService.resolveIdentifiable(${entity.identifiableType}, [identifier] as Set)

        if (identifiable == null) {
            throw new ${entity.className}NotFoundException("Could not find ${entity.name} with id [\${ identifier.value}]")
        }

        def ${id.fieldName} = ${id.fieldName}(identifiable.getIdentifierValue(IDART))

        def ${entity.fieldName} = ${domainService.fieldName}.findBy${id.className}(${id.fieldName})

        def ${dto.fieldName} = ${dtoAssembler.fieldName}.to${dto.className}(${entity.fieldName})
        ${dto.fieldName}.identifiers = identifiable.identifiers

        ${dto.fieldName}
    }

    @Override
    ${id.className} findByIdentifiers(Set<Identifier> identifiers) {

        def identifiable = identifiableService.resolveIdentifiable(${entity.identifiableType}, identifiers)

        def idartIdentifierValue = getIdentifierValue(identifiable.identifiers, IDART)

        ${id.fieldName}(idartIdentifierValue)
    }
}
