package ${applicationService.packageName}

import ${dto.packageName}.${dto.className}
import ${id.packageName}.${id.className}
import org.celllife.idart.domain.identifiable.Identifiable
import org.celllife.idart.domain.identifiable.IdentifiableService
import org.celllife.idart.domain.identifiable.Identifier
import ${entity.packageName}.${entity.className}NotFoundException
import ${domainService.packageName}.${domainService.className}

import static ${dtoAssembler.packageName}.${dtoAssembler.className}.to${entity.className}
import static ${dtoAssembler.packageName}.${dtoAssembler.className}.to${dto.className}
import static org.celllife.idart.common.AuthorityId.IDART
import static ${id.packageName}.${id.className}.${id.fieldName}
import static org.celllife.idart.domain.identifiable.IdentifiableType.${counterSequence.type}
import static org.celllife.idart.domain.identifiable.Identifiers.newIdentifier

import javax.annotation.Generated
import javax.inject.Inject
import javax.inject.Named

/**
 */
@Generated("org.celllife.idart.codegen.CodeGenerator")
@Named class ${applicationService.className}Impl implements ${applicationService.className} {

    @Inject ${domainService.className} ${domainService.fieldName}   

    @Inject IdentifiableService identifiableService

    @Override
    Boolean exists(${id.className} ${id.fieldName}) {
        ${domainService.fieldName}.exists(${id.fieldName})
    }

    ${id.className} save(${dto.className} ${dto.fieldName}) {

        def ${entity.fieldName} = to${entity.className}(${dto.fieldName})

        def identifiable = identifiableService.findByIdentifiers(${counterSequence.type}, ${dto.fieldName}.identifiers)
        if (identifiable == null) {

            ${entity.fieldName} = ${domainService.fieldName}.save(${entity.fieldName})

            identifiable = new Identifiable(type: ${counterSequence.type}, identifiers: ${dto.fieldName}.identifiers)
            identifiable.addIdentifier(newIdentifier(IDART, ${entity.fieldName}.id.value))
            identifiableService.save(identifiable)

        } else {

            ${entity.fieldName}.id = ${id.fieldName}(identifiable.getIdentifier(IDART).value)
            ${domainService.fieldName}.save(${entity.fieldName})

        }

        ${entity.fieldName}.id
    }

    @Override
    ${dto.className} findBy${id.className}(${id.className} ${id.fieldName}) {
        def identifier = newIdentifier(IDART, ${id.fieldName}.value)
        findByIdentifier(identifier)
    }

    @Override
    ${dto.className} findByIdentifier(Identifier identifier) {

        def identifiable = identifiableService.findByIdentifiers(${counterSequence.type}, [identifier] as Set)

        if (identifiable == null) {
            throw new ${entity.className}NotFoundException("Could not find ${entity.name} with id [\${ identifier.value}]")
        }

        def ${id.fieldName} = ${id.fieldName}(identifiable.getIdentifier(IDART).value)

        def ${entity.fieldName} = ${domainService.fieldName}.findBy${id.className}(${id.fieldName})

        def ${dto.fieldName} = to${dto.className}(${entity.fieldName})
        ${dto.fieldName}.identifiers = identifiable.identifiers

        ${dto.fieldName}
    }
}
