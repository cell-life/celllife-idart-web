package ${resourceController.packageName}

import ${id.packageName}.${id.className}
import ${dto.packageName}.${dto.className}
import ${entity.packageName}.${entity.className}NotFoundException
import ${entity.packageName}.${entity.className}ValidationException
import ${securityAdapter.packageName}.${securityAdapter.className}
import org.springframework.beans.factory.annotation.Value
import org.springframework.stereotype.Controller
import org.springframework.web.bind.annotation.PathVariable
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RequestMethod
import org.springframework.web.bind.annotation.ResponseBody

import javax.annotation.Generated
import javax.inject.Inject
import javax.servlet.http.HttpServletResponse
import java.security.Principal

import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST
import static javax.servlet.http.HttpServletResponse.SC_CREATED
import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND

/**
 */
@Generated("org.celllife.idart.codegen.CodeGenerator")
@Controller class ${resourceController.className} {

    @Inject ${securityAdapter.className} ${securityAdapter.fieldName}

    @Value('\${external.base.url}') String baseUrl

    @ResponseBody
    @RequestMapping(value = "/${resourcePath}/{${id.fieldName}}", method = RequestMethod.GET, produces = "application/json")
    ${dto.className} findBy${id.className}(@PathVariable("${id.fieldName}") ${id.className} ${id.fieldName},
                                              Principal principal,
                                              HttpServletResponse response) {

        try {

            return ${securityAdapter.fieldName}.findBy${id.className}(principal, ${id.fieldName})

        } catch (${entity.className}NotFoundException ignore) {

            response.setStatus(SC_NOT_FOUND)

            return null
        }
    }

    @RequestMapping(value = "/${resourcePath}", method = RequestMethod.POST)
    void save(@RequestBody ${dto.className} ${dto.fieldName}, Principal principal, HttpServletResponse response) {

        try {

            ${id.className} ${id.fieldName} = ${securityAdapter.fieldName}.save(principal, ${dto.fieldName})

            response.setHeader("Location", "\${baseUrl}/${entity.collectionFieldName}/\${${id.fieldName}}")
            response.setStatus(SC_CREATED)

        } catch (${entity.className}ValidationException e) {
            response.setStatus(SC_BAD_REQUEST)
        }
    }
}
