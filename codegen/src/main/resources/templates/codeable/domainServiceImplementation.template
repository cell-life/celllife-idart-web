package $domainPackageName

import org.celllife.idart.domain.common.Code

import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Service

import javax.annotation.Generated

/**
 * Generated by org.celllife.idart.codegen.CodeGenerator
 */
@Generated("org.celllife.idart.codegen.CodeGenerator")
@Service class ${entityName}ServiceImpl implements ${entityName}Service {

    @Autowired ${entityName}Repository ${lowerCaseEntityName}Repository

    @Override
    Iterable<${entityName}> save(Iterable<${entityName}> ${lowerCaseEntityNamePlural}) {
        ${lowerCaseEntityNamePlural}.collect { ${lowerCaseEntityName} -> (save(${lowerCaseEntityName})) }
    }

    @Override
    ${entityName} save(${entityName} ${lowerCaseEntityName}) {
        ${lowerCaseEntityName}Repository.save(lookupAndMerge(${lowerCaseEntityName}))
    }

    def lookupAndMerge(${entityName} ${lowerCaseEntityName}) {

        def (String system, String value) = getLookupCode(${lowerCaseEntityName})

        ${entityName} existing${entityName} = ${lowerCaseEntityName}Repository.findOneByCode(system, value)

        if (existing${entityName} == null) {

            // Ensure that idartCodeValue is always set
            if (${lowerCaseEntityName}.idartCodeValue == null) {
                ${lowerCaseEntityName}.addCode(${lowerCaseEntityName}.idartSystem, ${lowerCaseEntityName}.defaultCodeValue)
            }

            return ${lowerCaseEntityName}
        }

        existing${entityName}.mergeCodes(${lowerCaseEntityName})
        existing${entityName}
    }

    static getLookupCode(${entityName} ${lowerCaseEntityName}) {

        if (${lowerCaseEntityName}.idartCodeValue == null && ${lowerCaseEntityName}.defaultCodeValue == null) {
            throw new RuntimeException("No code for default system [\${ ${lowerCaseEntityName}.defaultSystem}] or idart system [\${ ${lowerCaseEntityName}.idartSystem}]")
        }

        if (${lowerCaseEntityName}.defaultCodeValue != null) {
            return [${lowerCaseEntityName}.defaultSystem, ${lowerCaseEntityName}.defaultCodeValue]
        }

        return [${lowerCaseEntityName}.idartSystem, ${lowerCaseEntityName}.idartCodeValue]
    }

    @Override
    Iterable<${entityName}> findAll() {
        ${lowerCaseEntityName}Repository.findAll()
    }

    @Override
    ${entityName} findByCode(String code) {
        ${lowerCaseEntityName}Repository.findOneByCode(${entityName}.IDART_SYSTEM, code)
    }

    @Override
    ${entityName} findByCodes(Iterable<Code> codes) {

        if (codes == null) {
            return null
        }

        for (code in codes) {
            def ${lowerCaseEntityName} = ${lowerCaseEntityName}Repository.findOneByCode(code.system, code.value)
            if (${lowerCaseEntityName} != null) {
                return ${lowerCaseEntityName}
            }
        }

        null
    }
}