package ${domainPackageName}

import org.celllife.idart.domain.common.Identifier
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Service

import javax.annotation.Generated

/**
 */
@Generated("org.celllife.idart.codegen.CodeGenerator")
@Service class ${entityName}ServiceImpl implements ${entityName}Service {

    @Autowired ${entityName}Repository ${lowerCaseEntityName}Repository

    @Autowired ${entityName}Sequence ${lowerCaseEntityName}Sequence

    @Autowired ${entityName}Validator ${lowerCaseEntityName}Validator

    @Override
    ${entityName} save(${entityName} new${entityName}) {

        ${lowerCaseEntityName}Validator.validate(new${entityName})

        def existing${entityName} = findByIdentifiers(new${entityName}.identifiers)

        if (requiresIdartIdentifier(new${entityName}, existing${entityName})) {
            new${entityName}.addIdentifier(${entityName}.IDART_SYSTEM, nextPatientIdentifier())
        }

        if (existing${entityName} == null) {
            existing${entityName} = new ${entityName}()
        }

        existing${entityName}.merge(new${entityName})

        ${lowerCaseEntityName}Repository.save(existing${entityName})
    }

    @Override
    ${entityName} findByIdentifiers(Iterable<Identifier> identifiers) {
        for (identifier in identifiers) {
            def existing${entityName} = ${lowerCaseEntityName}Repository.findOneByIdentifier(identifier.system, identifier.value)
            if (existing${entityName} != null) {
                return existing${entityName}
            }
        }

        null
    }

    @Override
    ${entityName} findByIdentifier(String identifier) {
        ${lowerCaseEntityName}Repository.findOneByIdentifier(${entityName}.IDART_SYSTEM, identifier)
    }

    @Override
    Iterable<${entityName}> findAll() {
        ${lowerCaseEntityName}Repository.findAll()
    }

    String nextPatientIdentifier() {
        String.format("%08d", ${lowerCaseEntityName}Sequence.nextValue())
    }

    static requiresIdartIdentifier(${entityName}... ${lowerCaseEntityNamePlural}) {

        for (${entityName} ${lowerCaseEntityName} in ${lowerCaseEntityNamePlural}) {
            if (${lowerCaseEntityName}?.hasIdentifierForSystem(${entityName}.IDART_SYSTEM)) {
                return false
            }
        }

        return true
    }
}
