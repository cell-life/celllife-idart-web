package ${domainPackageName}

import ${entities[0].domainPackageName}.${entities[0].className}
import ${entities[1].domainPackageName}.${entities[1].className}
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Service

import javax.annotation.Generated

/**
 */
@Generated("org.celllife.idart.codegen.CodeGenerator")
@Service class ${entities[0].className}${entities[1].className}ServiceImpl implements ${entities[0].className}${entities[1].className}Service {

    @Autowired ${entities[0].className}${entities[1].className}Repository ${propertyName}Repository

    @Override
    boolean exists(${entities[0].className} ${entities[0].propertyName}, ${entities[1].className} ${entities[1].propertyName}, Date dateActive) {
        ${propertyName}Repository.countBy${entities[0].className}And${entities[1].className}AndDateActive(${entities[0].propertyName}, ${entities[1].propertyName}, dateActive) == 0
    }

    @Override
    void save(${entities[0].className} ${entities[0].propertyName}, ${entities[1].className} ${entities[1].propertyName}) {

        def dateActive = new Date()

        if (exists(${entities[0].propertyName}, ${entities[1].propertyName}, dateActive)) {
            ${propertyName}Repository
                    .save(new ${entities[0].className}${entities[1].className}(${entities[0].propertyName}: ${entities[0].propertyName}, ${entities[1].propertyName}: ${entities[1].propertyName}, fromDate: dateActive))
        }
    }


    @Override
    void save(${entities[0].className} ${entities[0].propertyName}, Iterable<${entities[1].className}> ${entities[1].propertyName}s) {
        ${entities[1].propertyName}s.each { ${entities[1].propertyName} -> save(${entities[0].propertyName}, ${entities[1].propertyName}) }
    }

    @Override
    void save(${entities[1].className} ${entities[1].propertyName}, Iterable<${entities[0].className}> ${entities[0].propertyNamePlural}) {
        ${entities[0].propertyNamePlural}.each { ${entities[0].propertyName} -> save(${entities[0].propertyName}, ${entities[1].propertyName}) }
    }

    @Override
    void deleteBy${entities[0].className}(${entities[0].className} ${entities[0].propertyName}) {
        find${entities[1].classNamePlural}By${entities[0].className}(${entities[0].propertyName}).each { ${entities[1].propertyName} -> delete(${entities[0].propertyName}, ${entities[1].propertyName}) }
    }

    @Override
    void deleteBy${entities[1].className}(${entities[1].className} ${entities[1].propertyName}) {
        find${entities[0].classNamePlural}By${entities[1].className}(${entities[1].propertyName}).each { ${entities[0].propertyName} -> delete(${entities[0].propertyName}, ${entities[1].propertyName}) }
    }

    @Override
    void delete(${entities[0].className} ${entities[0].propertyName}, ${entities[1].className} ${entities[1].propertyName}) {

        ${entities[0].className}${entities[1].className} ${propertyName} =
            ${propertyName}Repository.findBy${entities[0].className}And${entities[1].className}AndDateActive(${entities[0].propertyName}, ${entities[1].propertyName}, new Date())

        if (${propertyName} != null) {
            ${propertyName}.thruDate = new Date()
            ${propertyName}Repository.save(${propertyName})
        }
    }

    @Override
    Iterable<${entities[1].className}> find${entities[1].classNamePlural}By${entities[0].className}(${entities[0].className} ${entities[0].propertyName}) {
        ${propertyName}Repository
                .findBy${entities[0].className}AndDateActive(${entities[0].propertyName}, new Date())
                .collect { ${propertyName} -> ${propertyName}.${entities[1].propertyName} }
    }

    @Override
    Iterable<${entities[1].className}> find${entities[1].classNamePlural}By${entities[0].className}Id(String ${entities[0].propertyName}Id) {
        ${propertyName}Repository
                .findBy${entities[0].className}IdAndDateActive(${entities[0].propertyName}Id, new Date())
                .collect { ${propertyName} -> ${propertyName}.${entities[1].propertyName} }
    }
            
    @Override
    Iterable<${entities[1].className}> find${entities[1].classNamePlural}By${entities[0].className}IdAnd${entities[1].className}Id(String ${entities[0].propertyName}Id, String ${entities[1].propertyName}Id) {
        ${propertyName}Repository
                .findBy${entities[0].className}IdAnd${entities[1].className}IdAndDateActive(
                        ${entities[0].propertyName}Id,
                        ${entities[1].propertyName}Id,
                        new Date()
                )
                .collect { ${propertyName} -> ${propertyName}.${entities[1].propertyName} }
    }
         
    @Override
    ${entities[1].className} findOne${entities[1].className}By${entities[0].className}IdAnd${entities[1].className}Id(String ${entities[0].propertyName}Id, String ${entities[1].propertyName}Id) {
        ${propertyName}Repository
                .findOneBy${entities[0].className}IdAnd${entities[1].className}IdAndDateActive(
                        ${entities[0].propertyName}Id,
                        ${entities[1].propertyName}Id,
                        new Date()
                )?.${entities[1].propertyName}
    }

    @Override
    Iterable<${entities[0].className}> find${entities[0].classNamePlural}By${entities[1].className}(${entities[1].className} ${entities[1].propertyName}) {
        ${propertyName}Repository
                .findBy${entities[1].className}AndDateActive(${entities[1].propertyName}, new Date())
                .collect { ${propertyName} -> ${propertyName}.${entities[0].propertyName} }
    }
}
