package ${springDataPackageName};

import ${domainPackageName}.${className};
import ${domainPackageName}.${className}Repository;
import ${entities[0].domainPackageName}.${entities[0].className};
import ${entities[1].domainPackageName}.${entities[1].className};
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.PagingAndSortingRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.data.rest.repository.annotation.RestResource;

import java.util.Date;

import javax.annotation.Generated;

/**
 * Generated by org.celllife.idart.codegen.CodeGenerator
 */
@RestResource(exported = false)
@Generated("org.celllife.idart.codegen.CodeGenerator")
public interface SpringData${className}Repository
        extends PagingAndSortingRepository<${className}, Long>, ${className}Repository {

    @Query("select ${propertyName} " +
            "from ${className} ${propertyName} " +
            "where ${propertyName}.${entities[0].propertyName} = :${entities[0].propertyName} " +
            "and ${propertyName}.${entities[1].propertyName} = :${entities[1].propertyName} " +
            "and ${propertyName}.fromDate <= :dateActive " +
            "and ((${propertyName}.thruDate is not null and ${propertyName}.thruDate > :dateActive) or ${propertyName}.thruDate is null)")
    ${className} findBy${entities[0].className}And${entities[1].className}AndDateActive(
                @Param("${entities[0].propertyName}") ${entities[0].className} ${entities[0].propertyName},
                @Param("${entities[1].propertyName}") ${entities[1].className} ${entities[1].propertyName},
                @Param("dateActive") Date dateActive);

    @Query("select count(*) " +
            "from ${className} ${propertyName} " +
            "where ${propertyName}.${entities[0].propertyName} = :${entities[0].propertyName} " +
            "and ${propertyName}.${entities[1].propertyName} = :${entities[1].propertyName} " +
            "and ${propertyName}.fromDate <= :dateActive " +
            "and ((${propertyName}.thruDate is not null and ${propertyName}.thruDate > :dateActive) or ${propertyName}.thruDate is null)")
    Long countBy${entities[0].className}And${entities[1].className}AndDateActive(
                @Param("${entities[0].propertyName}") ${entities[0].className} ${entities[0].propertyName},
                @Param("${entities[1].propertyName}") ${entities[1].className} ${entities[1].propertyName},
                @Param("dateActive") Date dateActive);

    @Query("select ${propertyName} " +
            "from ${className} ${propertyName} " +
            "where ${propertyName}.${entities[0].propertyName} = :${entities[0].propertyName} " +
            "and ${propertyName}.fromDate <= :dateActive " +
            "and ((${propertyName}.thruDate is not null and ${propertyName}.thruDate > :dateActive) or ${propertyName}.thruDate is null)")
    Iterable<${className}> findBy${entities[0].className}AndDateActive(
                @Param("${entities[0].propertyName}") ${entities[0].className} ${entities[0].propertyName},
                @Param("dateActive") Date dateActive);

    @Query("select ${propertyName} " +
            "from ${className} ${propertyName} " +
            "where ${propertyName}.${entities[0].propertyName}.pk = :${entities[0].propertyName}Identifier " +
            "and ${propertyName}.fromDate <= :dateActive " +
            "and ((${propertyName}.thruDate is not null and ${propertyName}.thruDate > :dateActive) or ${propertyName}.thruDate is null)")
    Iterable<${className}> findBy${entities[0].className}IdentifierAndDateActive(
                @Param("${entities[0].propertyName}Identifier") String ${entities[0].propertyName}Identifier,
                @Param("dateActive") Date dateActive);


    @Query("select ${propertyName} " +
                "from ${className} ${propertyName} " +
                "join ${propertyName}.${entities[1].propertyName}.identifiers ${entities[1].propertyName}Identifier " +
                "where ${propertyName}.${entities[0].propertyName}.pk = :${entities[0].propertyName}Identifier " +
                "and ${entities[1].propertyName}Identifier.value = :${entities[1].propertyName}Identifier " +
                "and ${propertyName}.fromDate <= :dateActive " +
                "and ((${propertyName}.thruDate is not null and ${propertyName}.thruDate > :dateActive) or ${propertyName}.thruDate is null)")
    Iterable<${className}> findBy${entities[0].className}IdentifierAnd${entities[1].className}IdentifierAndDateActive(
                @Param("${entities[0].propertyName}Identifier") String ${entities[0].propertyName}Identifier,
                @Param("${entities[1].propertyName}Identifier") String ${entities[1].propertyName}Identifier,
                @Param("dateActive") Date dateActive);

    @Query("select ${propertyName} " +
                "from ${className} ${propertyName} " +
                "where ${propertyName}.${entities[0].propertyName}.pk = :${entities[0].propertyName}Identifier " +
                "and ${propertyName}.${entities[1].propertyName}.pk = :${entities[1].propertyName}Identifier " +
                "and ${propertyName}.fromDate <= :dateActive " +
                "and ((${propertyName}.thruDate is not null and ${propertyName}.thruDate > :dateActive) or ${propertyName}.thruDate is null)")
    ${className} findOneBy${entities[0].className}IdentifierAnd${entities[1].className}IdentifierAndDateActive(
                @Param("${entities[0].propertyName}Identifier") String ${entities[0].propertyName}Identifier,
                @Param("${entities[1].propertyName}Identifier") String ${entities[1].propertyName}Identifier,
                @Param("dateActive") Date dateActive);

    @Query("select ${propertyName} " +
            "from ${className} ${propertyName} " +
            "where ${propertyName}.${entities[1].propertyName} = :${entities[1].propertyName} " +
            "and ${propertyName}.fromDate <= :dateActive " +
            "and ((${propertyName}.thruDate is not null and ${propertyName}.thruDate > :dateActive) or ${propertyName}.thruDate is null)")
    Iterable<${className}> findBy${entities[1].className}AndDateActive(
                @Param("${entities[1].propertyName}") ${entities[1].className} ${entities[1].propertyName},
                @Param("dateActive") Date dateActive);

}
