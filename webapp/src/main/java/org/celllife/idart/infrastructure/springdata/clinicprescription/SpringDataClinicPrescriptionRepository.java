package org.celllife.idart.infrastructure.springdata.clinicprescription;

import org.celllife.idart.domain.clinicprescription.ClinicPrescription;
import org.celllife.idart.domain.clinicprescription.ClinicPrescriptionRepository;
import org.celllife.idart.domain.clinic.Clinic;
import org.celllife.idart.domain.prescription.Prescription;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.PagingAndSortingRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.data.rest.repository.annotation.RestResource;

import java.util.Date;

import javax.annotation.Generated;

/**
 * Generated by org.celllife.idart.codegen.CodeGenerator
 */
@RestResource(exported = false)
@Generated("org.celllife.idart.codegen.CodeGenerator")
public interface SpringDataClinicPrescriptionRepository
        extends PagingAndSortingRepository<ClinicPrescription, Long>, ClinicPrescriptionRepository {

    @Query("select clinicPrescription " +
            "from ClinicPrescription clinicPrescription " +
            "where clinicPrescription.clinic = :clinic " +
            "and clinicPrescription.prescription = :prescription " +
            "and clinicPrescription.fromDate <= :dateActive " +
            "and ((clinicPrescription.thruDate is not null and clinicPrescription.thruDate > :dateActive) or clinicPrescription.thruDate is null)")
    ClinicPrescription findByClinicAndPrescriptionAndDateActive(
                @Param("clinic") Clinic clinic,
                @Param("prescription") Prescription prescription,
                @Param("dateActive") Date dateActive);

    @Query("select count(*) " +
            "from ClinicPrescription clinicPrescription " +
            "where clinicPrescription.clinic = :clinic " +
            "and clinicPrescription.prescription = :prescription " +
            "and clinicPrescription.fromDate <= :dateActive " +
            "and ((clinicPrescription.thruDate is not null and clinicPrescription.thruDate > :dateActive) or clinicPrescription.thruDate is null)")
    Long countByClinicAndPrescriptionAndDateActive(
                @Param("clinic") Clinic clinic,
                @Param("prescription") Prescription prescription,
                @Param("dateActive") Date dateActive);

    @Query("select clinicPrescription " +
            "from ClinicPrescription clinicPrescription " +
            "where clinicPrescription.clinic = :clinic " +
            "and clinicPrescription.fromDate <= :dateActive " +
            "and ((clinicPrescription.thruDate is not null and clinicPrescription.thruDate > :dateActive) or clinicPrescription.thruDate is null)")
    Iterable<ClinicPrescription> findByClinicAndDateActive(
                @Param("clinic") Clinic clinic,
                @Param("dateActive") Date dateActive);

    @Query("select clinicPrescription " +
            "from ClinicPrescription clinicPrescription " +
            "where clinicPrescription.clinic.pk = :clinicIdentifier " +
            "and clinicPrescription.fromDate <= :dateActive " +
            "and ((clinicPrescription.thruDate is not null and clinicPrescription.thruDate > :dateActive) or clinicPrescription.thruDate is null)")
    Iterable<ClinicPrescription> findByClinicIdentifierAndDateActive(
                @Param("clinicIdentifier") String clinicIdentifier,
                @Param("dateActive") Date dateActive);


    @Query("select clinicPrescription " +
                "from ClinicPrescription clinicPrescription " +
                "join clinicPrescription.prescription.identifiers prescriptionIdentifier " +
                "where clinicPrescription.clinic.pk = :clinicIdentifier " +
                "and prescriptionIdentifier.value = :prescriptionIdentifier " +
                "and clinicPrescription.fromDate <= :dateActive " +
                "and ((clinicPrescription.thruDate is not null and clinicPrescription.thruDate > :dateActive) or clinicPrescription.thruDate is null)")
    Iterable<ClinicPrescription> findByClinicIdentifierAndPrescriptionIdentifierAndDateActive(
                @Param("clinicIdentifier") String clinicIdentifier,
                @Param("prescriptionIdentifier") String prescriptionIdentifier,
                @Param("dateActive") Date dateActive);

    @Query("select clinicPrescription " +
                "from ClinicPrescription clinicPrescription " +
                "where clinicPrescription.clinic.pk = :clinicIdentifier " +
                "and clinicPrescription.prescription.pk = :prescriptionIdentifier " +
                "and clinicPrescription.fromDate <= :dateActive " +
                "and ((clinicPrescription.thruDate is not null and clinicPrescription.thruDate > :dateActive) or clinicPrescription.thruDate is null)")
    ClinicPrescription findOneByClinicIdentifierAndPrescriptionIdentifierAndDateActive(
                @Param("clinicIdentifier") String clinicIdentifier,
                @Param("prescriptionIdentifier") String prescriptionIdentifier,
                @Param("dateActive") Date dateActive);

    @Query("select clinicPrescription " +
            "from ClinicPrescription clinicPrescription " +
            "where clinicPrescription.prescription = :prescription " +
            "and clinicPrescription.fromDate <= :dateActive " +
            "and ((clinicPrescription.thruDate is not null and clinicPrescription.thruDate > :dateActive) or clinicPrescription.thruDate is null)")
    Iterable<ClinicPrescription> findByPrescriptionAndDateActive(
                @Param("prescription") Prescription prescription,
                @Param("dateActive") Date dateActive);

}
