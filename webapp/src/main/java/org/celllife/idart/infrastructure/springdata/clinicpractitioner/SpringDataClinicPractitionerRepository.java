package org.celllife.idart.infrastructure.springdata.clinicpractitioner;

import org.celllife.idart.domain.clinicpractitioner.ClinicPractitioner;
import org.celllife.idart.domain.clinicpractitioner.ClinicPractitionerRepository;
import org.celllife.idart.domain.clinic.Clinic;
import org.celllife.idart.domain.practitioner.Practitioner;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.PagingAndSortingRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.data.rest.repository.annotation.RestResource;

import java.util.Date;

import javax.annotation.Generated;

/**
 * Generated by org.celllife.idart.codegen.CodeGenerator
 */
@RestResource(exported = false)
@Generated("org.celllife.idart.codegen.CodeGenerator")
public interface SpringDataClinicPractitionerRepository
        extends PagingAndSortingRepository<ClinicPractitioner, Long>, ClinicPractitionerRepository {

    @Query("select clinicPractitioner " +
            "from ClinicPractitioner clinicPractitioner " +
            "where clinicPractitioner.clinic = :clinic " +
            "and clinicPractitioner.practitioner = :practitioner " +
            "and clinicPractitioner.fromDate < :dateActive " +
            "and ((clinicPractitioner.thruDate is not null and clinicPractitioner.thruDate > :dateActive) or clinicPractitioner.thruDate is null)")
    ClinicPractitioner findByClinicAndPractitionerAndDateActive(@Param("clinic") Clinic clinic,
                                                            @Param("practitioner") Practitioner practitioner,
                                                            @Param("dateActive") Date dateActive);

    @Query("select count(*) " +
            "from ClinicPractitioner clinicPractitioner " +
            "where clinicPractitioner.clinic = :clinic " +
            "and clinicPractitioner.practitioner = :practitioner " +
            "and clinicPractitioner.fromDate < :dateActive " +
            "and ((clinicPractitioner.thruDate is not null and clinicPractitioner.thruDate > :dateActive) or clinicPractitioner.thruDate is null)")
    Long countByClinicAndPractitionerAndDateActive(@Param("clinic") Clinic clinic,
                                                 @Param("practitioner") Practitioner practitioner,
                                                 @Param("dateActive") Date dateActive);

    @Query("select clinicPractitioner " +
            "from ClinicPractitioner clinicPractitioner " +
            "where clinicPractitioner.clinic = :clinic " +
            "and clinicPractitioner.fromDate < :dateActive " +
            "and ((clinicPractitioner.thruDate is not null and clinicPractitioner.thruDate > :dateActive) or clinicPractitioner.thruDate is null)")
    Iterable<ClinicPractitioner> findByClinicAndDateActive(@Param("clinic") Clinic clinic,
                                                         @Param("dateActive") Date dateActive);

    @Query("select clinicPractitioner " +
            "from ClinicPractitioner clinicPractitioner " +
            "where clinicPractitioner.clinic.pk = :clinicIdentifier " +
            "and clinicPractitioner.fromDate < :dateActive " +
            "and ((clinicPractitioner.thruDate is not null and clinicPractitioner.thruDate > :dateActive) or clinicPractitioner.thruDate is null)")
    Iterable<ClinicPractitioner> findByClinicIdentifierAndDateActive(@Param("clinicIdentifier") String clinicIdentifier,
                                                                                 @Param("dateActive") Date dateActive);


    @Query("select clinicPractitioner " +
                "from ClinicPractitioner clinicPractitioner " +
                "join clinicPractitioner.practitioner.identifiers practitionerIdentifier " +
                "where clinicPractitioner.clinic.pk = :clinicIdentifier " +
                "and practitionerIdentifier.value = :practitionerIdentifier " +
                "and clinicPractitioner.fromDate < :dateActive " +
                "and ((clinicPractitioner.thruDate is not null and clinicPractitioner.thruDate > :dateActive) or clinicPractitioner.thruDate is null)")
    Iterable<ClinicPractitioner> findByClinicIdentifierAndPractitionerIdentifier(@Param("clinicIdentifier") String clinicIdentifier,
                                                            @Param("practitionerIdentifier") String practitionerIdentifier);

    @Query("select clinicPractitioner " +
                "from ClinicPractitioner clinicPractitioner " +
                "where clinicPractitioner.clinic.pk = :clinicIdentifier " +
                "and clinicPractitioner.practitioner.pk = :practitionerIdentifier " +
                "and clinicPractitioner.fromDate < :dateActive " +
                "and ((clinicPractitioner.thruDate is not null and clinicPractitioner.thruDate > :dateActive) or clinicPractitioner.thruDate is null)")
    ClinicPractitioner findOneByClinicIdentifierAndPractitionerIdentifier(@Param("clinicIdentifier") String clinicIdentifier,
                                                            @Param("practitionerIdentifier") String practitionerIdentifier);

    @Query("select clinicPractitioner " +
            "from ClinicPractitioner clinicPractitioner " +
            "where clinicPractitioner.practitioner = :practitioner " +
            "and clinicPractitioner.fromDate < :dateActive " +
            "and ((clinicPractitioner.thruDate is not null and clinicPractitioner.thruDate > :dateActive) or clinicPractitioner.thruDate is null)")
    Iterable<ClinicPractitioner> findByPractitionerAndDateActive(@Param("practitioner") Practitioner practitioner,
                                                              @Param("dateActive") Date dateActive);

}
