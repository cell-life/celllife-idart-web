package org.celllife.idart.infrastructure.springdata.clinicpatient;

import org.celllife.idart.domain.clinicpatient.ClinicPatient;
import org.celllife.idart.domain.clinicpatient.ClinicPatientRepository;
import org.celllife.idart.domain.clinic.Clinic;
import org.celllife.idart.domain.patient.Patient;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.PagingAndSortingRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.data.rest.repository.annotation.RestResource;

import java.util.Date;

import javax.annotation.Generated;

/**
 * Generated by org.celllife.idart.codegen.CodeGenerator
 */
@RestResource(exported = false)
@Generated("org.celllife.idart.codegen.CodeGenerator")
public interface SpringDataClinicPatientRepository
        extends PagingAndSortingRepository<ClinicPatient, Long>, ClinicPatientRepository {

    @Query("select clinicPatient " +
            "from ClinicPatient clinicPatient " +
            "where clinicPatient.clinic = :clinic " +
            "and clinicPatient.patient = :patient " +
            "and clinicPatient.fromDate <= :dateActive " +
            "and ((clinicPatient.thruDate is not null and clinicPatient.thruDate > :dateActive) or clinicPatient.thruDate is null)")
    ClinicPatient findByClinicAndPatientAndDateActive(
                @Param("clinic") Clinic clinic,
                @Param("patient") Patient patient,
                @Param("dateActive") Date dateActive);

    @Query("select count(*) " +
            "from ClinicPatient clinicPatient " +
            "where clinicPatient.clinic = :clinic " +
            "and clinicPatient.patient = :patient " +
            "and clinicPatient.fromDate <= :dateActive " +
            "and ((clinicPatient.thruDate is not null and clinicPatient.thruDate > :dateActive) or clinicPatient.thruDate is null)")
    Long countByClinicAndPatientAndDateActive(
                @Param("clinic") Clinic clinic,
                @Param("patient") Patient patient,
                @Param("dateActive") Date dateActive);

    @Query("select clinicPatient " +
            "from ClinicPatient clinicPatient " +
            "where clinicPatient.clinic = :clinic " +
            "and clinicPatient.fromDate <= :dateActive " +
            "and ((clinicPatient.thruDate is not null and clinicPatient.thruDate > :dateActive) or clinicPatient.thruDate is null)")
    Iterable<ClinicPatient> findByClinicAndDateActive(
                @Param("clinic") Clinic clinic,
                @Param("dateActive") Date dateActive);

    @Query("select clinicPatient " +
            "from ClinicPatient clinicPatient " +
            "where clinicPatient.clinic.pk = :clinicIdentifier " +
            "and clinicPatient.fromDate <= :dateActive " +
            "and ((clinicPatient.thruDate is not null and clinicPatient.thruDate > :dateActive) or clinicPatient.thruDate is null)")
    Iterable<ClinicPatient> findByClinicIdentifierAndDateActive(
                @Param("clinicIdentifier") String clinicIdentifier,
                @Param("dateActive") Date dateActive);


    @Query("select clinicPatient " +
                "from ClinicPatient clinicPatient " +
                "join clinicPatient.patient.identifiers patientIdentifier " +
                "where clinicPatient.clinic.pk = :clinicIdentifier " +
                "and patientIdentifier.value = :patientIdentifier " +
                "and clinicPatient.fromDate <= :dateActive " +
                "and ((clinicPatient.thruDate is not null and clinicPatient.thruDate > :dateActive) or clinicPatient.thruDate is null)")
    Iterable<ClinicPatient> findByClinicIdentifierAndPatientIdentifierAndDateActive(
                @Param("clinicIdentifier") String clinicIdentifier,
                @Param("patientIdentifier") String patientIdentifier,
                @Param("dateActive") Date dateActive);

    @Query("select clinicPatient " +
                "from ClinicPatient clinicPatient " +
                "where clinicPatient.clinic.pk = :clinicIdentifier " +
                "and clinicPatient.patient.pk = :patientIdentifier " +
                "and clinicPatient.fromDate <= :dateActive " +
                "and ((clinicPatient.thruDate is not null and clinicPatient.thruDate > :dateActive) or clinicPatient.thruDate is null)")
    ClinicPatient findOneByClinicIdentifierAndPatientIdentifierAndDateActive(
                @Param("clinicIdentifier") String clinicIdentifier,
                @Param("patientIdentifier") String patientIdentifier,
                @Param("dateActive") Date dateActive);

    @Query("select clinicPatient " +
            "from ClinicPatient clinicPatient " +
            "where clinicPatient.patient = :patient " +
            "and clinicPatient.fromDate <= :dateActive " +
            "and ((clinicPatient.thruDate is not null and clinicPatient.thruDate > :dateActive) or clinicPatient.thruDate is null)")
    Iterable<ClinicPatient> findByPatientAndDateActive(
                @Param("patient") Patient patient,
                @Param("dateActive") Date dateActive);

}
